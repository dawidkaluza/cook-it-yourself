plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'pl.dkaluza'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()

    // Repo for common internal libraries
    maven {
        url = 'https://repsy.io/mvn/dawidkaluza/cook-it-yourself/'
    }
}


compileJava {
    options.compilerArgs += [
        '-Amapstruct.defaultComponentModel=spring',
        '-Amapstruct.defaultInjectionStrategy=constructor',
    ]
}

ext {
    mapstructVersion = "1.5.5.Final"
    testcontainersVersion = "1.19.7"
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'pl.dkaluza:domain-core:0.0.1-SNAPSHOT'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

testing {
    //noinspection GroovyAssignabilityCheck
    suites {
        configureEach {
            useJUnitJupiter()

            dependencies {
                implementation 'org.assertj:assertj-core:3.25.1'
                implementation 'org.mockito:mockito-core:5.11.0'
                implementation 'org.mockito:mockito-junit-jupiter:5.11.0'
            }
        }

        test {
            dependencies {
                implementation 'pl.dkaluza:spring-data-test:0.0.1-SNAPSHOT'
            }
        }

        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()

                implementation 'pl.dkaluza:domain-core:0.0.1-SNAPSHOT'
                implementation 'org.springframework.boot:spring-boot-starter-test'
                implementation 'org.springframework.security:spring-security-test'
                implementation 'org.jdbi:jdbi3-core:3.45.1'
                implementation 'com.rabbitmq:amqp-client:5.21.0'
                implementation 'redis.clients:jedis:5.1.2'
                implementation "org.testcontainers:testcontainers:${testcontainersVersion}"
                implementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
                implementation 'io.rest-assured:rest-assured:5.4.0'

            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.register('resolveDependencies') {
    doLast {
        rootProject.allprojects { project ->
            Set<Configuration> configurations = project.buildscript.configurations + project.configurations
            configurations.findAll { c -> c.canBeResolved }
                    .forEach { c -> c.resolve() }
        }
    }
}

tasks.register('embedWebApp', Copy) {
    from "$rootDir/web/dist"
    into "$buildDir/resources/main/static/web/."

    dependsOn(':web:npmCi')
    dependsOn(':web:npmTest')
    dependsOn(':web:npmBuild')
}

tasks.named('processResources') {
    mustRunAfter('embedWebApp')
}

tasks.register('copyComposeCommon', Copy) {
    from "$rootDir/compose.common.yml"
    into "$buildDir/resources/integrationTest/"
}

tasks.named('processIntegrationTestResources') {
    dependsOn('copyComposeCommon')
}

tasks.named('integrationTest') {
    environment 'USER_SERVICE_ENV', 'prod'
}

tasks.named("bootJar") {
    archiveClassifier = 'boot'
    dependsOn('embedWebApp')
}

tasks.named("jar") {
    archiveClassifier = ''
    dependsOn('embedWebApp')
}