plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'pl.dkaluza'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.1")
	set('testcontainersVersion', "1.19.7")
}

dependencies {
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway-mvc'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.session:spring-session-data-redis'
}

testing {
	//noinspection GroovyAssignabilityCheck
	suites {
		configureEach {
			useJUnitJupiter()

			dependencies {
				implementation 'org.assertj:assertj-core:3.25.1'
				implementation 'org.mockito:mockito-core:5.11.0'
				implementation 'org.mockito:mockito-junit-jupiter:5.11.0'
			}
		}

		test {
		}

		integrationTest(JvmTestSuite) {
			dependencies {
				implementation project()

				implementation 'org.springframework.boot:spring-boot-starter-test'
				implementation 'org.springframework.security:spring-security-test'
				implementation "org.testcontainers:testcontainers:${testcontainersVersion}"
				implementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
			}

			targets {
				all {
					testTask.configure {
						shouldRunAfter(test)
					}
				}
			}
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.register('copyComposeCommon', Copy) {
	from "$rootDir/compose.common.yml"
	into "$buildDir/resources/integrationTest/"
}

tasks.named('processIntegrationTestResources') {
	dependsOn('copyComposeCommon')
}

tasks.named("bootJar") {
	archiveClassifier = 'boot'
}

tasks.named("jar") {
	archiveClassifier = ''
}